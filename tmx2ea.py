import six, tmx, sys, os, lzss, glob
import tkinter as tk
from tkinter import filedialog, messagebox
import argparse


# TODO: Update macros, and don't overwrite existing maps

def show_exception_and_exit(exc_type, exc_value, tb):
    import traceback
    traceback.print_exception(exc_type, exc_value, tb)
    input("Press Enter key to exit.")
    sys.exit(-1)

def makedmp(tmap,layer,fname):
    ary = [tmap.width+(tmap.height<<8)]
    for tile in layer.tiles:
        ary.append((tile.gid - 1) * 4)
    result = b''.join([(x).to_bytes(2,'little') for x in ary])
    with open(os.path.splitext(fname)[0]+"_data.dmp", 'wb') as myfile:
        lzss.compress(result, myfile)

def getTileChange(layer,x,y,w,h):
    tilemap = [hex((tile.gid-1)*4) for tile in layer.tiles if tile.gid is not 0]
    result = layer.name.replace(" ", "_") + ":\nSHORT "
    for t in tilemap:
        result += (t + " ")
    result += "\nALIGN 4\n\n"
    return result

def process(tmap,fname):
    """
    Let's see. Need to get layers. 
     <property name="Height" value ="3"/>
     <property name="ID" value ="1"/>
     <property name="Width" value ="3"/>
     <property name="X" value ="6"/>
     <property name="Y" value ="0"/>
    """

    output = ""

    chapterdata = "SetChapterData({ChapterID},{ObjectType},{ObjectType2},{PaletteID},{TileConfig},{MapID},Map,{Anims1},{Anims2},{MapChangesID})\nEventPointerTable({MapChangesID}, MapChanges)\n"
    macros = ""
    changes = ""

    #map properties
    ChapterID = "ChapterID"
    ObjectType = "ObjectType"
    ObjectType2 = "0"
    PaletteID = "PaletteID"
    TileConfig = "TileConfig"
    MapID = "map_id"
    Anims1 = "0"
    Anims2 = "0"
    MapChangesID = "map_changes"

    if (tmap.tilewidth == tmap.tileheight == 16)==False:
        print("WARNING:\n" + os.path.split(fname)[1] + " does not have 16x16 tiles, skipping")
        return None

    mainlayer = False    
    for layer in tmap.layers:
        isMain = False
        for p in layer.properties:
            if (p.name.lower() == "main"):
                assert mainlayer==False, "More than one layer marked as Main in "+os.path.split(fname)[1]
                isMain = True
                mainlayer = True
                makedmp(tmap,layer,fname) #turn this layer into tiles and output a dmp
            elif p.name.lower() == "id":
                layerID = p.value
            elif p.name.lower() == "height":
                height = p.value
            elif p.name.lower() == "width":
                width = p.value
            elif p.name.lower() == "x":
                layerX = p.value
            elif p.name.lower() == "y":
                layerY = p.value
            elif p.name.lower() == "chapterid":
                ChapterID = p.value
            elif p.name.lower() == "objecttype":
                ObjectType = p.value
            elif p.name.lower() == "objecttype1":
                ObjectType = p.value
            elif p.name.lower() == "objecttype2":
                ObjectType2 = p.value                
            elif p.name.lower() == "paletteid":
                PaletteID = p.value
            elif p.name.lower() == "tileconfig":
                TileConfig = p.value
            elif p.name.lower() == "mapid":
                MapID = p.value
            elif p.name.lower() == "mapchangesid":
                MapChangesID = p.value
            elif p.name.lower() == "anims":
                Anims1 = p.value
            elif p.name.lower() == "anims1":
                Anims1 = p.value
            elif p.name.lower() == "anims2":
                Anims2 = p.value
            
        if len(tmap.layers)==1: #for the case of no properties and one layer
            mainlayer = True
            makedmp(tmap,layer,fname) #turn this layer into tiles and output a dmp
        if (isMain==False) and len(tmap.layers)!=1: #write any tile change layers
            macro = "TileMap(" + str(layerID) + "," + str(layerX) + "," + str(layerY) + "," + str(width) + "," + str(height) + "," + layer.name.replace(" ", "_") + ")\n"
            tileChangeData = getTileChange(layer,layerX,layerY,width,height)
            macros += macro
            changes += tileChangeData
    if mainlayer==False: #handle the case of no main and multiple layers
        print("WARNING:\n" + os.path.split(fname)[1] + " has no layer marked as Main, skipping")
        return None

    output += chapterdata.format(**locals())
    output += ("Map:\n#incbin \"" + os.path.splitext(os.path.split(fname)[1])[0]+"_data.dmp\"\n\nMapChanges:\n")
    if macros == "": #no map changes
        output = output.replace("EventPointerTable(map_changes, MapChanges)\n",'').replace("\nMapChanges:\n",'').replace("map_changes","0")
    else:
        output += (macros + "TileMapEnd\n\n" + changes)
    return output

def genHeaderLines():
    yield "// Map Data Installer Generated by tmx2ea\n\n"

    yield '#include "EAstdlib.event"\n\n'

    yield "#ifndef TMX2EA\n"
    yield "#define TMX2EA\n\n"

    yield "#ifndef ChapterDataTable\n"
    yield "    #ifdef _FE7_\n"
    yield "        #define ChapterDataTable 0xC9A200\n"
    yield "    #endif\n"
    yield "    #ifdef _FE8_\n"
    yield "        #define ChapterDataTable 0x8B0890\n"
    yield "    #endif\n"
    yield "#endif\n\n"

    yield '#define SetChapterData(ChapterID,ObjectType1,ObjectType2,PaletteID,TileConfig,MapID,MapPointer,Anims1,Anims2,MapChanges) "PUSH; ORG ChapterDataTable+(ChapterID*148)+4; BYTE ObjectType1 ObjectType2 PaletteID TileConfig MapID Anims1 Anims2 MapChanges; EventPointerTable(MapID,MapPointer); POP"\n\n'

    yield "#endif // TMX2EA\n\n"

def main():
    sys.excepthook = show_exception_and_exit
    create_installer = False

    parser = argparse.ArgumentParser()
    parser.add_argument("tmxpath", nargs='*', help="path to tmx file to process") #all arguments are tmx files
    parser.add_argument("-s", "--scanfolders", action="store_true", help="scan all subfolders and generate master installer") #optional scan

    args = parser.parse_args()

    if (not args.tmxpath) and (not args.scanfolders): #no arguments given and scanfolders is not true
        root = tk.Tk()
        root.withdraw()
        if messagebox.askyesno("Folder Scan","Scan all subfolders for .tmx files?"):
            args.scanfolders = True
        else:
            tmxmap = (filedialog.askopenfilename(filetypes=[("TMX files",".tmx"),("All files",".*")],initialdir=os.getcwd(),title="Select TMX file to process"))
            if tmxmap=="":
                input("No file given.\nPress Enter key to exit.")
                sys.exit(-1)
            else:
                args.tmxpath = [tmxmap]
    if args.scanfolders:
        args.tmxpath = glob.glob('**/*.tmx',recursive=True)
        create_installer = True

    processedFiles = []

    for tmxFile in args.tmxpath:
        tmxMap = tmx.TileMap.load(tmxFile)
        dataLines = process(tmxMap, tmxFile)

        if dataLines:
            eventFile = os.path.splitext(tmxFile)[0]+".event"

            with open(eventFile, 'w') as f:
                f.write('{\n\n')
                f.writelines(genHeaderLines())
                f.write(dataLines)
                f.write('}\n')
            
            processedFiles.append(eventFile)

    if create_installer:
        with open("Master Map Installer.event", 'w') as f:
            f.writelines(map(lambda file: '#include "{}"\n'.format(file), processedFiles))

    input("....done!\nPress Enter key to exit.")

if __name__ == '__main__':
    main()